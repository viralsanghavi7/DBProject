/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dbproject.Professor;

import dbproject.dataType.*;
import dbproject.Professor.*;
import dbproject.WelcomeScreen;
import dbproject.WelcomeScreen;
import dbproject.dbconnection.dbconnection_dbObject;
import java.io.*;
import java.sql.*;


public class ProfHome extends javax.swing.JFrame {

    DataType_user userObj;
    boolean bAddCourseClicked;
    public String query;
    Statement stmt = null;
    ResultSet rs = null;
    public Connection conn = null;
    DataType_course[] course_array = new DataType_course[100];
    DataType_course temp_course = new DataType_course();
    String[] course_list = new String[100];

    /**
     * Creates new form MainScreen
     */
    public ProfHome() {
      //  System.out.println("here");
        dbconnection_dbObject db = dbconnection_dbObject.getDBConnection();
        stmt = db.stmt;
        conn = db.conn;
        initComponents();

        bAddCourseClicked = false;
    }

    //Overloaded constructor
    public ProfHome(DataType_user inputObj) {
      //  System.out.println("in non empty constructor");
        initComponents();
        bAddCourseClicked = false;
        dbconnection_dbObject db = dbconnection_dbObject.getDBConnection();
        stmt = db.stmt;
        conn = db.conn;
        userObj = inputObj;
        jLabel2.setText("Welcome " + userObj.user_name);
        init_course_list();

        // for TA view don't display these buttons
        if (inputObj.user_type.equals("S")) {

            jButton2.setVisible(false);
            jButton1.setVisible(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Home");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton1.setText("Select Course");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Add Course");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Log out");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(191, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jComboBox1.setSelectedItem(0);
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Select a course from dropdown:");

        jButton3.setText("Continue");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setText("Welcome");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 27, Short.MAX_VALUE)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(jLabel1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(37, 37, 37)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(229, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
     Code executed when 'Select Course ' Button is clicked
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jLabel1.setText("Select a course from dropdown:");
        bAddCourseClicked = false;
        jComboBox1.removeAllItems();
         init_course_list();
    }//GEN-LAST:event_jButton1ActionPerformed

    /*
     Code executed when 'Add Course ' Button is clicked
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jLabel1.setText("Select a course from dropdown to add:");
        bAddCourseClicked = true;

        jComboBox1.removeAllItems();
        add_course_list();
        //Fetch a list of new courses which are not present in the professor-course relationship
        //and populate the dropdown with such courses.
    }//GEN-LAST:event_jButton2ActionPerformed

    /*
     'Continue' button click
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String subjectName = jComboBox1.getSelectedItem().toString();
        int index = jComboBox1.getSelectedIndex();
        if (bAddCourseClicked) {
            //System.out.println(userObj.user_id);
            //Insert the relationship between course and professor
            //fetch the courses to populate the dropdown again.

            //Allow the user to see the added course in the dropdown along with previous courses.
            //   jLabel1.setText("Select a course from dropdown:");
            query = "INSERT INTO taught_by (prof_id, course_id) "
                    + "VALUES ('" + userObj.user_id + "','" + course_list[index] + "')";
            //System.out.println(query);
            try {
                rs = stmt.executeQuery(query);

            } catch (Exception oops) {
                System.out.println("WARNING - Register - jButton1ActionPerformed - send data in DBUSER : " + oops);
            }

            go_to_prof_action(index);
        } else {
     ///       DataType_course courseObj = new DataType_course();

            //Get the information about the course and populate courseObj
            //temp
            //   courseObj.course_name = "Database Management System";
            //populate the courseAction object that need to be passed further.
            go_to_prof_action(index);
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    /*
     Code if user clicks on log out.
     */
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        WelcomeScreen obj = new WelcomeScreen();
        obj.setVisible(true);

        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProfHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProfHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProfHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProfHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProfHome().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables

    private void add_course_list() {

        int i = 0;
        dbconnection_dbObject db = dbconnection_dbObject.getDBConnection();
        query = "SELECT distinct(C.COURSE_ID), C.COURSE_NAME, C.COURSE_LEVEL, C.COURSE_START_DT, C.COURSE_END_DT,"
                + "C.NO_OF_STUDENTS_ENROLLED, C.MAX_STUDENTS_ALLOWED FROM COURSE C, TAUGHT_BY T WHERE"
                + " c.course_id not in (select tb.course_id from taught_by tb )";
        //System.out.println(query);
        try {
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                temp_course = new DataType_course();
                temp_course.course_id = rs.getString("COURSE_ID");
                temp_course.course_name = rs.getString("COURSE_NAME");
                temp_course.course_level = rs.getString("COURSE_LEVEL");
                temp_course.course_start_dt = rs.getTimestamp("COURSE_START_DT");
                temp_course.course_end_dt = rs.getTimestamp("COURSE_END_DT");
                temp_course.max_students_allowed = rs.getInt("MAX_STUDENTS_ALLOWED");
                temp_course.no_of_students_enrolled = rs.getInt("NO_OF_STUDENTS_ENROLLED");

                course_array[i] = temp_course;
                course_list[i] = temp_course.course_id;
                i++;
                jComboBox1.addItem(rs.getString("COURSE_NAME")+" "+temp_course.course_id);
            }
        } catch (Exception oops) {
            System.out.println("ProfHome.java:add_course_list() " + oops);
        }
    }

    public void go_to_prof_action(int index) {
        //DataType_courseAction courseActionObj = new DataType_courseAction();
        //     courseActionObj.courseObj = courseObj;
        //courseActionObj.userObj = userObj;
       // course_array[index] = temp_course;
        //System.out.println(course_array[index]);
        Prof_CourseActions obj = new Prof_CourseActions(userObj,course_array[index]);
        obj.setVisible(true);

        this.dispose();
    }

    private void init_course_list() {

        int i = 0;
        dbconnection_dbObject db = dbconnection_dbObject.getDBConnection();
        if(userObj.user_type.equals("S")){
        
            query = "select c.course_id, c.course_name, c.course_level, c.course_start_dt, c.course_end_dt,"
                    + "c.max_students_allowed, c.no_of_students_enrolled from course c where "
                    + "c.course_id = (select course_id from teaching_assistant where student_id ='"
                    + userObj.user_id + "')";
        }else{
        query = "(SELECT T.PROF_ID,T.COURSE_ID,C.COURSE_NAME,C.COURSE_LEVEL, C.COURSE_START_DT,"
                + "C.COURSE_END_DT, C.MAX_STUDENTS_ALLOWED, C.NO_OF_STUDENTS_ENROLLED "
                + " FROM TAUGHT_BY T,COURSE C WHERE T.PROF_ID='"
                + userObj.user_id + "' AND C.COURSE_ID = T.COURSE_ID)"; }
       //System.out.println(query);
        try {
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                temp_course = new DataType_course();
                temp_course.course_id = rs.getString("COURSE_ID");
                     temp_course.course_name = rs.getString("COURSE_NAME");
                        temp_course.course_level = rs.getString("COURSE_LEVEL");
                        temp_course.course_start_dt = rs.getTimestamp("COURSE_START_DT");
                        temp_course.course_end_dt = rs.getTimestamp("COURSE_END_DT");
                        temp_course.max_students_allowed = rs.getInt("MAX_STUDENTS_ALLOWED");
                        temp_course.no_of_students_enrolled = rs.getInt("NO_OF_STUDENTS_ENROLLED");
                        
                course_array[i] = temp_course;
                course_list[i] = temp_course.course_id;
                i++;
                jComboBox1.addItem(rs.getString("COURSE_NAME")+" "+temp_course.course_id);
            }
        } catch (Exception oops) {
            System.out.println("ProfHome.java:add_course_list() " + oops);

        }
    }
}
