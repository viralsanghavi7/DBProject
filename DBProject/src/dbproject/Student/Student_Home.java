/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dbproject.Student;
import dbproject.dataType.DataType_courseAction;
import dbproject.Professor.*;
import dbproject.Professor.Prof_CourseActions;
import dbproject.WelcomeScreen;
import java.io.*;
import dbproject.dataType.*;
import dbproject.dbconnection.dbconnection_dbObject;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Calendar;
import java.util.Date;

/**
 *
 * @author Chetan
 */
public class Student_Home extends javax.swing.JFrame {
    //Attributes
    private Statement stmt = null;
    private ResultSet rs = null;
    DataType_user userObj;
    /**
     * Creates new form MainScreen
     */
    public Student_Home() {
        initComponents();
        dbconnection_dbObject db = dbconnection_dbObject.getDBConnection();
        stmt = db.stmt;
        
        jLabel1.setVisible(false);
        jComboBox1.setVisible(false);
        jButton3.setVisible(false);
        jButton2.setVisible(false);
        jLabel2.setVisible(false);
        jTextField1.setVisible(false);
        jButton5.setVisible(false);
        
        //Enrollment message
        jLabel3.setVisible(false);
        
    }
    
    //Overloaded constructor
    public Student_Home(DataType_user inputObj) {
        initComponents();
        dbconnection_dbObject db = dbconnection_dbObject.getDBConnection();
        stmt = db.stmt;
        userObj = inputObj;
        
        jLabel1.setVisible(false);
        jComboBox1.setVisible(false);
        jButton3.setVisible(false);
        
        jLabel2.setVisible(false);
        jTextField1.setVisible(false);
        jButton5.setVisible(false);
        
        //Welcome message
        jLabel3.setVisible(true);
        jLabel3.setText("Welcome, "+userObj.user_name);
        jLabel3.setForeground(Color.black);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton1.setText("Select Course");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Add Course");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Log out");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(191, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Select a course from dropdown of enrolled courses");

        jButton3.setText("Continue");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setText("Enter Token below to add a new course");

        jButton5.setText("Sign Up");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel3.setText("Enrollment Message");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 27, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /*
    Code executed when 'Select Course ' Button is clicked. This is for selecting all the enrolled courses.
    */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jLabel1.setVisible(true);
        jComboBox1.setVisible(true);
        this.setComboBoxCourseFromDB();
        jButton3.setVisible(true);
        
        jLabel2.setVisible(false);
        jTextField1.setVisible(false);
        jButton5.setVisible(false);
        
        jLabel3.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    /*
    Code executed when 'Add Course ' Button is clicked. To add a new course.
    */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jLabel1.setVisible(false);
        jComboBox1.setVisible(false);
        this.setComboBoxCourseFromDB();
        jButton3.setVisible(false);
        
        jLabel2.setVisible(true);
        jTextField1.setVisible(true);
        jButton5.setVisible(true);
        
        jLabel3.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    //Set up comboBox for Course from DB's data
    private void setComboBoxCourseFromDB(){
        //Empty the ComboBox
        jComboBox1.removeAllItems();
        
        //Query to get all the courses of the student
        String query = "SELECT e.course_id "
                        +"FROM enrollment e, course c "
                        +"WHERE e.student_id = '" + userObj.user_id + "' AND e.course_id = c.course_id";
        
        System.out.println("query to get student courses : "+ query);
        try {
            rs = stmt.executeQuery(query);
        
            while (rs.next()) {//treatement of each tuple
		    String courseID = rs.getString("course_id");
		    System.out.println("course: " +courseID);
                    jComboBox1.addItem(courseID);//add the course in the ComboBox
		
            }

        }
        catch (Exception oops) {
            System.out.println("WARNING - Student_Home - setComboBoxCourseFromDB - get all courses of the user : "+ oops); 
        }
        //PPS 22_230For test - because DB not ok - TODO : remove it when db ok
        //jComboBox1.addItem("CSC440");
        //PPE 22_230
        
    }
    /*
    'Continue' button click
    */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
   //     DataType_course courseObj = new DataType_course();
        //Get the information about the course and populate courseObj
        String courseIDSelected = jComboBox1.getSelectedItem().toString();//get the courseID of the course in the comboBox
        DataType_courseAction courseActionObj = new DataType_courseAction(courseIDSelected);
//         courseActionObj.courseObj = courseObj;
        courseActionObj.userObj = userObj;

        String subjectName = jComboBox1.getSelectedItem().toString();
        
        Student_CourseActions obj = new Student_CourseActions(courseActionObj);
        sendNotification(courseActionObj);
        obj.setVisible(true);
        
        this.dispose();
        
    }//GEN-LAST:event_jButton3ActionPerformed

    /*
    Code if user clicks on log out.
    */
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        WelcomeScreen obj = new WelcomeScreen();
       obj.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    /*
    This button will check for token and will sign up the student for perticular course if all conditions are met.
    */
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        boolean isATA = false;
        //Check if the token is valid
        String token = jTextField1.getText();
        String query = "SELECT * from token t where t.token_id = '"+token+"'";
        System.out.println("query to check existance of the token "+token+" : "+query);
        
        try {
            rs = stmt.executeQuery(query);
        
            if (!rs.next()) {//rs return nothing - the token doesn't exist
                System.out.println("The Token "+token+" is not recorded in our Database.");
                //Warning message
                jLabel3.setVisible(true);
                jLabel3.setText("This token doesn't exist.");
                jLabel3.setForeground(Color.red);
                
            }
            else{ 
                //Add student in the course
                //get the course_id and date of expirancy of the token of the course related to the token
                String courseID = rs.getString("course_id");
                Date tokenDate = rs.getTimestamp("token_exp_dt");
                
                //check if the expiration date of the token hasn't been crossed
                query = "SELECT SYSDATE FROM DUAL";
                System.out.println("query to get date from server : "+query);

                try {
                    rs = stmt.executeQuery(query);
                    rs.next();
                    Date currentDate = rs.getTimestamp("sysdate");
                    if (currentDate.before(tokenDate) ){//token still valid
                        //check if the student is not already enrolled in this class
                        query = "select * from enrollment e where e.student_id = '"+userObj.user_id+"' and e.course_id ='"+courseID+"'";
                        System.out.println("query to check if student already enrolled in clas : "+query);

                        try {
                            rs = stmt.executeQuery(query);

                            if (!rs.next()) {//the query returns nothing - the student is not already enrolled in this class 
                                
                                //check if the student is not a TA in a class that have the same subject
                                //get the topicID of the course courseID
                                query = "Select * from course_topic c where course_id = '"+courseID+"'";
                                System.out.println("query get the topicID of the course courseID "+courseID+" : "+query);

                                try {
                                    rs = stmt.executeQuery(query);
                                    while(rs.next()){//treat each topicID
                                        String topicID = rs.getString("topic_id");
                                        
                                        //check if the user is not a TA in the courses of the list of courseID that have this topicId 
                                        query = "select c.course_id from course_topic c where c.topic_id = '"+topicID+"'";
                                        System.out.println("query get the list of courseID that have topicID "+topicID+" : "+query);
                                        
                                        try {
                                            ResultSet rs2 = stmt.executeQuery(query);

                                            while(rs2.next()){//treat each courseID that as the same topicId that the token's course
                                                //check if the user is not a TA in the course
                                                String potentialCourseID = rs2.getString("course_id");
                                        
                                                query = "select * from course c where c.course_id = '"+potentialCourseID+"'";
                                                System.out.println("query get data of the course "+potentialCourseID+" : "+query);

                                                try {
                                                    ResultSet rs3 = stmt.executeQuery(query);

                                                    while(rs3.next()){//treat each courseID that as the same topicId that the token's course
                                                        //check if the user is not a TA in the course
                                                        query = "select * from teaching_assistant t where t.student_id = '"+userObj.user_id+"' and t.course_id = '"+potentialCourseID+"' ";
                                                        System.out.println("query check if user as a TA in "+potentialCourseID+" : "+query);

                                                        try {
                                                            ResultSet rs4 = stmt.executeQuery(query);
                            
                                                            while(rs4.next()){//The student is a TA in the course - check each classes where the user is a TA
                                                                //check the expiracyDate
                                                                Date validTillDate = rs4.getDate("valid_till_dt");
                                                                if (currentDate.before(validTillDate)) {//the TA is currently a TA
                                                                    isATA = true;
                                                                    //Send a notification to the teachers and the user
                                                                    String messageUser = "WARNING : You tried to join the class "+courseID+" despite you were a TA in the class "+potentialCourseID+". The teachers of these courses receive a notification about that.";
                                                                    String messageProfProtentialCourseID = "WARNING : The student "+userObj.user_id+" is currently a TA in the class "+potentialCourseID+" and tried to be added to the class "+courseID;
                                                                    String messageProfCourseID = messageProfProtentialCourseID;
                                                                    String profProtentialCourseID = null;
                                                                    String profCourseID = null;
                                                                    
                                                                    //get the userId of the teachers
                                                                    query = "select * from taught_by t where t.course_id = '"+courseID+"' or t.course_id = '"+potentialCourseID+"' ";
                                                                    System.out.println("query get list of profID of the courses "+potentialCourseID+" and "+courseID+": "+query);

                                                                    try {
                                                                        ResultSet rs5 = stmt.executeQuery(query);
                                                                        while(rs5.next()){//treat each profID
                                                                            String profID = rs5.getString("prof_id");
                                                                            String courseOfProf = rs5.getString("course_id");
                                                                            if (courseOfProf.equals(courseID)){
                                                                                profCourseID = profID;
                                                                            }
                                                                            else{
                                                                                profProtentialCourseID = profID;
                                                                            }
                                                                        }

                                                                    }
                                                                    catch (Exception oops) {
                                                                        System.out.println("WARNING - Student_Home - jButton5ActionPerformed(java.awt.event.ActionEvent evt) -get list of profID of the courses "+potentialCourseID+" and "+courseID+":  "+ oops); 
                                                                    }
                                                                    
                                                                    
                                                                    //send the notification to the prof of potentialcourseID
                                                                    new DataType_notification(profProtentialCourseID, potentialCourseID, messageProfProtentialCourseID);
                                                                    
                                                                    //send the notification to the prof of courseID
                                                                    new DataType_notification(profCourseID, courseID, messageProfCourseID);
                                                                    
                                                                    //Warning message
                                                                    jLabel3.setVisible(true);
                                                                    jLabel3.setText("Already a TA in a similar class.");
                                                                    jLabel3.setForeground(Color.red);
                                                                    
                                                                }
                                                            }
                                                        }
                                                        catch (Exception oops) {
                                                            System.out.println("WARNING - Student_Home - jButton5ActionPerformed(java.awt.event.ActionEvent evt) -check if user as a TA in "+potentialCourseID+" :  "+ oops); 
                                                        }


                                                    }
                                                }
                                                catch (Exception oops) {
                                                    System.out.println("WARNING - Student_Home - jButton5ActionPerformed(java.awt.event.ActionEvent evt) -get the list of courseID that have topicID "+topicID+" : "+ oops); 
                                                }

                                            }
                                        }
                                        catch (Exception oops) {
                                            System.out.println("WARNING - Student_Home - jButton5ActionPerformed(java.awt.event.ActionEvent evt) -get the list of courseID that have topicID "+topicID+" : "+ oops); 
                                        }
                                        
                                    }
                                }
                                catch (Exception oops) {
                                    System.out.println("WARNING - Student_Home - jButton5ActionPerformed(java.awt.event.ActionEvent evt) -get the topicID of the course courseID "+courseID+" : "+ oops); 
                                }
                                
                                
                                
                                if (isATA == false){//the student is not a TA
                                    DataType_courseAction dataCourse = new DataType_courseAction(courseID);//creation of a dataType related to the course

                                //Check if there is enough place inside the class to add this student
                                int noOfStudentEnrolled = dataCourse.getNoOfSudentEnrolled();
                                int maxStudentAllowed = dataCourse.getMaxStudentAllowed();

                                if (noOfStudentEnrolled + 1 <= maxStudentAllowed) {//The student can be added to the class
                                    //Increment the number of student inrolled in the table course
                                    query = "UPDATE course set no_of_students_enrolled = "+(noOfStudentEnrolled + 1)+" where  course_id = '"+courseID+"'";
                                    System.out.println("query to update value of students enrolled : "+query);

                                    try {
                                        rs = stmt.executeQuery(query);
                                        //Add the class and the student in the table enrollment
                                        query = "INSERT INTO enrollment(student_id, course_id) VALUES ('"+userObj.user_id+"', '"+courseID+"')";
                                        System.out.println("query to insert in enrollment table the couple studentID and class : "+query);

                                        try {
                                            rs = stmt.executeQuery(query);
                                            System.out.println("enrollment OK");

                                            //Warning message
                                            jLabel3.setVisible(true);
                                            jLabel3.setText("Course Added Successfully");
                                            jLabel3.setForeground(Color.green);

                                            //Bloc for Select Course
                                            jLabel1.setVisible(true);
                                            jButton3.setVisible(true);
                                            jComboBox1.setVisible(true);

                                            //Bloc for token
                                            jLabel2.setVisible(false);
                                            jTextField1.setVisible(false);
                                            jButton5.setVisible(false);

                                        }
                                        catch (Exception oops) {
                                            System.out.println("WARNING - Student_Home - jButton5ActionPerformed - insert data in enrollment ("+courseID+", "+userObj.user_id+") : "+ oops); 
                                        }
                                    }
                                    catch (Exception oops) {
                                        System.out.println("WARNING - Student_Home - jButton5ActionPerformed - update value of no_of_student_enrolled of course_id"+courseID+" : "+ oops); 
                                    }

                                    } else {//not enought room to add an another student
                                        System.out.println("No enought room for an other student. Adding is impossible.");
                                        //Warning message
                                        jLabel3.setVisible(true);
                                        jLabel3.setText("enrollment impossible. No free seat.");
                                        jLabel3.setForeground(Color.red);
                                    }
                                }
                            }
                            else{//student is already enrolled in this class
                                System.out.println("The course with the course_id "+courseID+" is already in the list of the user.");
                                //Warning message
                                jLabel3.setVisible(true);
                                jLabel3.setText("Already enrolled in.");
                                jLabel3.setForeground(Color.red);
                            }

                        }
                        catch (Exception oops) {
                            System.out.println("WARNING - Student_Home - jButton5ActionPerformed - get data related to the course_id"+courseID+" : "+ oops); 
                        }
                    }
                    else{//the token is not valid
                        System.out.println("The token "+token+" is no more valid - date expired.");
                        //Warning message
                        jLabel3.setVisible(true);
                        jLabel3.setText("This token is expired.");
                        jLabel3.setForeground(Color.red);
                    }

                }
                catch (Exception oops) {
                    System.out.println("WARNING - Student_Home - jButton5ActionPerformed - get current date : "+ oops); 
                }
                
            }

        }
        catch (Exception oops) {
            System.out.println("WARNING - Student_Home - jButton5ActionPerformed - get data related to the token_id "+token+" : "+ oops); 
        }
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Student_Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Student_Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Student_Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Student_Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Student_Home().setVisible(true);
                
            }
        });
    }
    
    //Function that check if notifications have to be send
    public void sendNotification(DataType_courseAction courseActionObj){
        //get the current date from the database
        Date currentDate;
        Date futurDate;
        int hoursBeforeNotification = 24;//students will receive notifications 24h before the end_date of an assignment
                
        String query = "SELECT SYSDATE FROM DUAL";
        System.out.println("query to get date from server : "+query);
        
        try {
            rs = stmt.executeQuery(query);
            rs.next();
            currentDate = rs.getTimestamp("sysdate");
            //Get the date 24h later
            Calendar cal = Calendar.getInstance(); // creates calendar
            cal.setTime(new Date()); // sets calendar time/date
            cal.add(Calendar.HOUR_OF_DAY, hoursBeforeNotification); // adds hourseforeNotifications
            futurDate = cal.getTime();
            
            
            //get all the data related to the homeworks in the course
            query = "SELECT * from assignment a where a.course_id = '"+courseActionObj.getCourseID()+"'";
            System.out.println("query get all the homeworks in the course "+courseActionObj.getCourseID()+" : "+query);

            try {
                rs = stmt.executeQuery(query);
                while(rs.next()){//treat each homework
                    Date assignmentEndDate = rs.getDate("end_dt");
                    String assignmentID = rs.getString("assignment_id");

                    if (futurDate.after(assignmentEndDate) ){//the due date of this assignment is in less than 24h
                        //Check if the user has make at least one attempt in this assignment
                        query = "SELECT COUNT(*) from attempt a where a.assignment_id = '"+assignmentID+"' and a.student_id='"+courseActionObj.userObj.getUser_id()+"'";
                        System.out.println("query get the number of attempts of the assignments "+assignmentID+" by the user "+courseActionObj.userObj.getUser_id()+" : "+query);

                        try {
                            rs = stmt.executeQuery(query);
                            rs.next();
                            int numberOfAttempt = rs.getInt("COUNT(*)");
                            System.out.println("number Of attempt :"+numberOfAttempt);
                            
                            if (numberOfAttempt == 0) {//the user did make any attempt
                                //creation of a notification
                                String message = "WARNING : You have an assignment in "+courseActionObj.getCourseID()+" in less than 24h.";
                                new DataType_notification(courseActionObj.userObj.user_id, courseActionObj.getCourseID(), message);
                            }

                        }
                        catch (Exception oops) {
                            System.out.println("WARNING - Student_Notification - sendNotification() -get the number of attempts of the assignments "+assignmentID+" by the user "+courseActionObj.userObj.getUser_id()+" : "+ oops); 
                        }
                   }    

                }

            }
            catch (Exception oops) {
                System.out.println("WARNING - Student_Notification - sendNotification() -get all data related to the homeworks in the class "+courseActionObj.getCourseID()+" : "+ oops); 
            }
        }
        catch (Exception oops) {
            System.out.println("WARNING - Student_Home - sendNotification() - get current date : "+ oops); 
        }
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
